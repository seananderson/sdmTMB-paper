\documentclass[article]{jss}

%% -- LaTeX packages and custom commands ---------------------------------------

%% recommended packages
\usepackage{orcidlink,thumbpdf,lmodern}

\usepackage[utf8]{inputenc}

%% new custom commands
\newcommand{\class}[1]{`\code{#1}'}
\newcommand{\fct}[1]{\code{#1()}}



%% -- Article metainformation (author, title, ...) -----------------------------

%% - \author{} with primary affiliation (and optionally ORCID link)
%% - \Plainauthor{} without affiliations
%% - Separate authors by \And or \AND (in \author) or by comma (in \Plainauthor).
%% - \AND starts a new line, \And does not.
\author{
Sean C. Anderson~\orcidlink{0000-0001-9563-1937}\\Pacific Biological
Station \And Eric J. Ward~\orcidlink{0000-0002-4359-0296}\\Northwest
Fisheries Science Center \AND Philina A.
English~\orcidlink{0000-0003-2992-6782}\\Pacific Biological
Station \And Lewis A. K. Barnett~\orcidlink{0000-0002-9381-8375}\\Alaska
Fisheries Science Center
}
\title{\pkg{sdmTMB}: An \proglang{R} Package for Fast, Flexible, and
User-Friendly Generalized Linear Mixed Effects Models with Spatial and
Spatiotemporal Random Fields}

\Plainauthor{Sean C. Anderson, Eric J. Ward, Philina A. English, Lewis
A. K. Barnett}
\Plaintitle{sdmTMB: An R Package for Fast, Flexible, and Accessible
Generalized Linear Mixed Effects Models with Spatial and Spatiotemporal
Random Fields}
\Shorttitle{\pkg{sdmTMB}: geostatistical SPDE-based GLMMs with
\pkg{TMB}}


\Abstract{Geostatistical data are common across scientific fields and available
  in increasingly large datasets. However, appropriate models to analyse these
  data, such as generalised linear mixed effects models with Gaussian random
  fields, are computationally intensive and challenging to implement for many
  users. Here, we introduce the \proglang{R} package \pkg{sdmTMB}, which extends
  the flexible interface familiar to users of \pkg{lme4}, \pkg{glmmTMB}, or
  \pkg{mgcv} to include spatial and spatiotemporal latent fields using
  a predictive-process SPDE-(stochastic partial differential equation) based
  approach. SPDE matrices are constructed with \proglang{R}-\pkg{INLA} and
  estimation is conducted via maximum marginal likelihood with Template Model
  Builder (\pkg{TMB}) or via Bayesian inference with \pkg{tmbstan} and
  \pkg{rstan}. We describe the model and explore case studies that illustrate
  \pkg{sdmTMB}'s flexibility in implementing penalised smoothers, non-stationary
  processes (time-varying and spatially varying coefficients), and anisotropy
  (directionally dependent spatial correlation). Additional functionality
  includes hurdle models, break-point effects, and out-of-sample cross
  validation. Finally, we compare the functionality, speed, and interfaces of
  related software, demonstrating that \pkg{sdmTMB} can be an order of magnitude
  faster than \proglang{R}-\pkg{INLA}. We hope \pkg{sdmTMB}'s accessible
interface will help open this useful class of models to a wider field of
geostatistical analysts.}

%% - \Keywords{} with LaTeX markup, at least one required
%% - \Plainkeywords{} without LaTeX markup (if necessary)
%% - Should be comma-separated and in sentence case.

\Keywords{Gaussian Markov random fields (GMRF), generalized linear mixed effects
models (GLMM), INLA, SPDE, species distribution modelling, R package,
spatio-temporal, spatial-temporal, Template Model Builder}

\Plainkeywords{Gaussian Markov random fields (GMRF), generalized linear mixed
effects models (GLMM), INLA, SPDE, species distribution modelling, R package,
spatio-temporal, spatial-temporal, Template Model Builder}

%% publication information
%% \Volume{50}
%% \Issue{9}
%% \Month{June}
%% \Year{2012}
%% \Submitdate{}
%% \Acceptdate{2012-06-04}

%% - \Address{} of at least one author
%% - May contain multiple affiliations for each author
%%   (in extra lines, separated by \emph{and}\\).
%% - May contain multiple authors for the same affiliation
%%   (in the same first line, separated by comma).

\Address{
    Sean C. Anderson\\
    Pacific Biological Station\\
    Fisheries and Oceans Canada, Nanaimo, BC, Canada\\
  E-mail: \email{sean.anderson@dfo-mpo.gc.ca}\\

      Eric J. Ward\\
    Northwest Fisheries Science Center\\
    National Oceanic and Atmospheric Administration, National Marine
Fisheries Service, Seattle, WA, USA\\


      Philina A. English\\
    Pacific Biological Station\\
    Fisheries and Oceans Canada, Nanaimo, BC, Canada\\


      Lewis A. K. Barnett\\
    Alaska Fisheries Science Center\\
    National Marine Fisheries Service, National Oceanic and Atmospheric
Administration, Seattle, WA, USA\\

  }

% tightlist command for lists without linebreak
\providecommand{\tightlist}{%
  \setlength{\itemsep}{0pt}\setlength{\parskip}{0pt}}

\usepackage{amsmath} \usepackage{amssymb} \usepackage{bm} \usepackage{lscape}
\usepackage{tablefootnote} \usepackage{threeparttable} \usepackage{booktabs}
\usepackage{pifont} \usepackage{newunicodechar} \usepackage{gensymb}

\newunicodechar{✓}{\ding{51}} \newunicodechar{✗}{\ding{55}}
\newunicodechar{˚}{\degree} \DeclareGraphicsExtensions{.pdf,.png,.jpg}

\widowpenalty10000 \clubpenalty10000

\begin{document}

<<preliminaries, echo=FALSE, results='hide', include=FALSE, cache=FALSE>>=
library(knitr)
opts_chunk$set(engine = 'R', tidy = FALSE)
options(prompt = "R> ", continue = "+  ", width = 70, useFancyQuotes = FALSE)
@

<<main-setup, include=FALSE, cache=FALSE>>=
knitr::opts_chunk$set(
  echo = FALSE,
  message = FALSE,
  warning = FALSE,
  collapse = TRUE,
  comment = "#>",
  cache = TRUE,
  autodep = TRUE,
  fig.width = 7,
  fig.asp = 0.618,
  fig.pos = "ht",
  cache.comments = TRUE,
  dev = "pdf",
  dpi = 140,
  optipng = "-strip all",
  highlight = FALSE
)
knitr::knit_hooks$set(optipng = knitr::hook_optipng)
options(prompt = "R> ", continue = "+  ", width = 72, useFancyQuotes = FALSE)
opts_chunk$set(prompt = TRUE)
options(replace.assign = TRUE, width = 72, prompt = "R> ")
knitr::render_sweave()
@

\clearpage

\section{Introduction}\label{introduction}

Data are often collected in space or in space repeatedly over time. While such
data are a rich source of information \citep[e.g.,][]{legendre1989a, rossi1992,
tilman1997spatial}, they are challenging to properly model---data closer in
space and time are usually more similar to each other than data farther apart
due to measured and unmeasured variables \citep{cressie1993, diggle2007,
cressie2011}. While measured variables can be accounted for with predictors in
a model (e.g., measuring and modelling temperature effects on species
abundance), unmeasured variables (e.g., everything influencing species abundance
but not explicitly modelled) can cause residual spatial correlation. Accounting
for this residual correlation is important because doing so allows for valid
statistical inference \citep{legendre1989a, dormann2007}, can improve
predictions \citep[e.g.,][]{shelton2014}, and can be of interest itself
\citep[e.g.,][]{thorson2019d, barnett2021}.

Geostatistical generalized linear mixed effects models (GLMMs) with spatially
correlated random effects are a class of models appropriate for these data
\citep{rue2005gmrf, diggle2007, cressie2011}. Similarly to how random intercepts
can account for correlation among groups, spatial or spatiotemporal random
effects can account for unmeasured variables causing observations to be
correlated in space or space and time. A common approach to modelling these
spatial effects is with Gaussian random fields (GRFs), where the random effects
describing the spatial patterning are assumed to be drawn from a multivariate
normal (MVN) distribution, constrained by some covariance function such as the
exponential or Matérn \citep{cressie1993, diggle2007, chiles1999}.

Such models quickly become computationally limiting due to the need to invert
large matrices to keep track of covariation among data
\citep[e.g.,][]{rue2005gmrf, latimer2009}. Many solutions have been proposed,
such as predictive processes \citep{banerjee2008, latimer2009}, the stochastic
partial differential equation (SPDE) approximation to GRFs \citep{lindgren2011},
and nearest-neighbour Gaussian processes \citep{datta2016, finley2022}. These
approaches reduce the scale of the covariance estimation problem while providing
a means to evaluate the data likelihood, thereby allowing fitting via Bayesian
\citep{gelfand2017} or maximum likelihood methods. This can greatly improve
computational efficiency \citep[e.g.,][]{heaton2019}. The SPDE approach is
a solution popularized via the \proglang{R}-\pkg{INLA} package \citep{rue2009,
lindgren2011, lindgren2015} and an implementation in \pkg{TMB} \citep[Template
Model Builder,][]{kristensen2016} that relies on \proglang{R}-\pkg{INLA} to
create input matrices \citep[e.g.,][]{thorson2019, osgood-zimmerman2021}.
Details are beyond the scope of this paper and are not necessary to use the
software discussed here, but the idea is that the solution to a specific SPDE is
a GRF with a Matérn covariance function and this `trick' enables one to
efficiently fit approximations to GRFs to large spatial datasets
\citep{lindgren2011}.

Software packages for specifying statistical models that can include the SPDE,
such as \proglang{R}-\pkg{INLA} and \pkg{TMB}, are flexible and powerful but are
challenging to use for many applied researchers. For example, \pkg{TMB} requires
the user to program in a \proglang{C++} template and it can be slow to
experiment with multiple models when writing bespoke model code. Packages such
as \pkg{lme4} \citep{bates2015} and \pkg{glmmTMB} \citep{brooks2017} let users
quickly iterate and explore statistical models---focusing on evaluating fit and
comparing models---but do not have built-in SPDE functionality. Packages such as
\pkg{VAST} \citep{thorson2019} and \pkg{inlabru} \citep{bachl2019} are powerful
user interfaces to fit spatial models that use the SPDE, but they either lack
a modular interface familiar to those who have used \pkg{lme4} or \pkg{glmmTMB},
or lack some functionality. We provide a more detailed comparison of related
software packages in Table \ref{tab:functionality} and the Discussion.

Here, we introduce the \proglang{R} package \pkg{sdmTMB}, which implements
geostatistical spatial and spatiotemporal GLMMs using \pkg{TMB} for model
fitting and \proglang{R}-\pkg{INLA} to set up SPDE matrices. Our aim is not to
replace the above-mentioned statistical packages, but to provide a fast,
flexible, and user-friendly interface that is familiar to users of \pkg{lme4},
\pkg{glmmTMB}, or \pkg{mgcv} \citep{wood2017a} for a specific class of spatial
and spatiotemporal models. Many features of \pkg{sdmTMB} may be found in other
software (Table 1) but to date no package has included all in a single package.
One common application in the field of ecology is species distribution models
(SDMs), hence the package name (i.e., SDMs with \pkg{TMB}: \pkg{sdmTMB}). This
paper describes the basic functionality of this \proglang{R} package and its
underlying statistical model, illustrates its use through two case studies, and
concludes with a comparison to related software.

\section{Model description}\label{model-description}

\pkg{sdmTMB} fits GLMMs to spatial or spatiotemporal geostatistical data.
Geostatistical data refers to data observed at specific spatial coordinates
reflecting some underlying spatial process \citep{rossi1992, diggle2007}. These
data can be collected across discrete points in time. Areal data (data
aggregated to polygon or grid level) may be analyzed using other spatial models,
including conditional (CAR) autoregressive models \citep[e.g.,][]{verhoef2018};
\pkg{sdmTMB} can also fit models with areal data if each polygon has an
associated centroid. A benefit of the geostatistical approach over CAR or
similar models is that the parameters describing spatial covariance can be more
easily interpreted \citep{wall2004} (e.g., spatial variance and range---the
distance at which points are effectively independent).

The process component of an \pkg{sdmTMB} model can be formed by any combination
of main (``fixed'') effects \(\bm{\beta}\) and offset \(O_{\bm{s},t}\), IID
(independent and identically distributed) random intercepts \(\alpha_g\),
spatial intercept random fields \(\omega_{\bm{s}}\), spatiotemporal intercept
random fields \(\epsilon_{\bm{s},t}\), time-varying effects \(\bm{\gamma_t}\),
and spatially varying effects \(\zeta_{\bm{s}}\) (Figure~\ref{fig:diagram}).
These components are discussed in more detail via our examples below.

\[
\begin{aligned}
\mu_{\bm{s},t} &=
g^{-1} \left( \bm{X}^{\mathrm{main}}_{\bm{s},t} \bm{\beta} +
O_{\bm{s},t} +
\alpha_g +
\omega_{\bm{s}} +
\epsilon_{\bm{s},t} +
\bm{X}^{\mathrm{tvc}}_{\bm{s},t} \bm{\gamma_t} +
\bm{X}^{\mathrm{svc}}_{\bm{s},t} \zeta_{\bm{s}} \right),
\end{aligned}
\]
This process component is combined with an observation error family (e.g.,
Gaussian, gamma, binomial, Tweedie) and link function \(g\) (e.g., identity,
log, logit) as in any generalized linear model (GLM) \citep{mccullagh1989}. Some
families can be combined into a two-part ``delta'' or ``hurdle'' model
\citep{aitchison1955} to model the zero vs.~non-zero observations separately
from the positive observations. See the model description vignette for an
expanded description of the statistical model
(\texttt{browseVignettes("sdmTMB")} or see the
\href{https://pbs-assess.github.io/sdmTMB/articles/}{rendered version}).

The GLMMs underpinning \pkg{sdmTMB} models are spatially explicit---they
estimate interpretable parameters of a spatial covariance function: parameters
defining the magnitude of spatial variation and the rate of correlation decay
with distance. In contrast, semi- and non-parametric approaches do not estimate
spatial covariance functions (e.g., \pkg{randomForest} \citep{liaw2002},
\pkg{MaxEnt} \citep{phillips2006}, and most smooths in \pkg{mgcv}
\citep{wood2017a}). The random fields in \pkg{sdmTMB} are structured as MVN
constrained by a Matérn covariance function \citep{matern1960}. The Matérn can
accommodate a range of shapes and can be both isotropic (correlation decays the
same in all directions) or anisotropic (correlation is directionally dependent)
\citep{haskard2007}. The Matérn standard deviations are estimated separately for
the various fields and the range---the distance at which spatial correlation
decays to \(\sim 0.13\) \citep{lindgren2015}---can be shared among random fields
or estimated separately (\texttt{share\_range} argument).

By default, if spatiotemporal fields are included, they are assumed IID;
however, additional options allow them to be modelled as a random walk or
first-order autoregressive, AR(1), process (Figure~\ref{fig:diagram}). Turning
off both spatial and spatiotemporal effects allows for comparison with standard
non-spatial GLMs or GLMMs. We include additional flexibility in specifying the
linear main effect matrix: covariates can be modelled as penalized smooth
functions (generalized additive models, GAMs) using the same \texttt{s()} syntax
as in \pkg{mgcv} \citep{wood2017a} (thereby allowing automatic selection of
smoother `wiggliness'), or can be modelled with threshold shapes: hockey-stick
models, \texttt{breakpt()}, \citep{barrowman2000} or logistic functions,
\texttt{logistic()}. \pkg{sdmTMB} can use many \texttt{mgcv::s()} and
\texttt{mgcv::t2()} smoothers including bivarate smoothers \texttt{s(x, y)},
smoothers varying by continuous or categorical variables \texttt{s(x1, by =
x2)}, cyclical smoothers \texttt{s(x, bs = "cc")}, and smoothers with
specified basis dimensions \texttt{s(x, k = 4)} \citep{wood2017a}.

The \pkg{sdmTMB} model is fit by maximum marginal likelihood. Internally,
a \pkg{TMB} \citep{kristensen2016} model template is used to calculate the
marginal log likelihood and its gradient, and the negative log likelihood is
minimized via the non-linear optimization routine \texttt{stats::nlminb()} in
\proglang{R} \citep{gay1990, r2021}. Random effects are estimated at values that
maximize the log likelihood conditional on the estimated fixed effects and are
integrated over via the Laplace approximation \citep{kristensen2016}. After
rapid model exploration with maximum likelihood, one can optionally pass an
\pkg{sdmTMB} model to the \proglang{R} package \pkg{rstan} \citep{carpenter2017,
rstan} via \pkg{tmbstan} \citep{monnahan2018} to estimate the joint posterior
distribution for Bayesian inference.

\pkg{sdmTMB} models can include penalized likelihoods by assigning priors to
model parameters (\texttt{?sdmTMBpriors}). These priors may be useful in cases
where estimation is difficult because of identifiability issues or relatively
flat likelihood surfaces, or to impart prior information or achieve
regularization. Following other recent SPDE implementations in \pkg{TMB}
\citep{breivik2021, osgood-zimmerman2021}, penalized complexity (PC) priors
\citep{simpson2017, fuglstad2019} (\texttt{?pc\_matern}) can constrain the
spatial range and variance parameters.

The \pkg{sdmTMB} package is constructed from S3 classes and designed to be both modular and familiar to users of widely used \proglang{R} packages (e.g., \pkg{glmmTMB}, \pkg{lme4}, \pkg{mgcv}). Data may be simulated with or without a fitted model (\texttt{simulate.sdmTMB()}, \texttt{sdmTMB\_simulate()} respectively). Estimation is done via maximum marginal likelihood with the \texttt{sdmTMB()} function, and the resulting fitted model can be used to make predictions (\texttt{predict.sdmTMB()}) or calculate residuals (\texttt{residuals.sdmTMB()}), derive additional quantities of interest, and simulate Bayesian posterior distributions. Common quantities of interest may include summarizing shifts in the center of gravity (\texttt{get\_cog()}) \citep[e.g.,][]{thorson2016cog}, or tracking total densities through time (\texttt{get\_index()}). The \texttt{get\_index()} function generates a weighted average of densities for the prediction grid, integrating across space; for prediction grids with equally sized cells, each cell will contribute equally to the total average, however cells may be of unequal size.
% TODO: describe this in more detail and how it could apply beyond ecology; maybe a derived variables subsection? Expanded this sentence a bit -- COGs are pretty common in other fields, but I don't know about indices -- removed `ecology` from the description

\begin{landscape}
\begin{figure}[p]
\centering
\includegraphics[width=9in]{../../figs/diagram}
\caption[]{
Components of an \pkg{sdmTMB} model with illustrations, descriptions, examples,
notation, and example code. An \pkg{sdmTMB} model can be built from any
combination of the process components (first six rows) plus an observation
component (last row). The examples are from an SDM context, but the model can be
fit to any spatially referenced point data. Notation: We refer to design
matrices as $\bm{X}$. The indexes $\bm{s}$, $t$, and $g$ index spatial
coordinates, time, and group, respectively. The $\sigma$ and $\bm{\Sigma}$
symbols represent standard deviations and covariance matrices, respectively. All
other symbols refer to the  described model components (e.g., $\bm{\beta}$ and
$\bm{\omega}$ refer to a vector of main effects and spatial random field
deviations, respectively). See the \pkg{sdmTMB}
\href{https://pbs-assess.github.io/sdmTMB/articles/}{model description vignette}
for a full description of the model. Note that \code{s()} denotes a smoother as
in \pkg{mgcv} \citep{wood2017a}, \code{breakpt()} denotes a breakpoint
'hockey-stick' shape \citep[e.g.][]{barrowman2000}, \code{(1|g)} denotes
a random intercept by group \code{g}, and \code{\textasciitilde 0} is used in
an \proglang{R} formula to omit an intercept.}\label{fig:diagram}
\end{figure}
\end{landscape}

\section{Model validation and selection}\label{model-validation-and-selection}

Validation and selection of state-space models is challenging, particularly when
using the Laplace approximation \citep{thygesen2017a}. We provide several
approaches to assist this process: (1) The Akaike Information Criterion
\citep[AIC,][]{akaike1974} can be calculated with \texttt{AIC()}, although AIC
has well-documented biases with mixed-effects models \citep{liang2008}. (2)
Alternatively, k-fold cross validation with \texttt{sdmTMB\_cv()} can be used
with user-specified or randomly chosen folds for model selection or to evaluate
goodness of fit according to user-calculated criteria (e.g., mean squared error,
area under the curve). (3) An \pkg{sdmTMB} model can be passed to the
\pkg{tmbstan} package \citep{monnahan2018} to sample from the joint posterior
with Stan \citep{carpenter2017}, evaluate the accuracy of the Laplace
approximation, or perform posterior predictive checks (see
\texttt{?extract\_mcmc}). (4) The \texttt{residuals()} method by default returns
randomized quantile \citep{dunn1996} or probability integral transform (PIT)
\citep{smith1985} residuals. For state-space models, these residuals have known
statistical issues with the Laplace approximation \citep{thygesen2017a} but are
quick to calculate. A version that uses Markov chain Monte Carlo (MCMC) sampling
of the random effects to avoid this issue \citep{rufener2021} is recommended but
slower (\texttt{?residuals.sdmTMB}). Simulation-based residuals \citep{dharma}
are also possible. (5) The \texttt{simulate.sdmTMB()} method can simulate from
fitted models and the \texttt{sdmTMB\_simulate()} function facilitates
simulating data without starting from a fitted model. Models can be fit to these
simulated data to ensure identifiability, evaluate bias and precision in
parameter estimation, or evaluate the consequences of model misspecification.

\clearpage

\section{Installation}\label{installation}

\pkg{sdmTMB} can be installed from the Comprehensive \proglang{R}
Archive Network (CRAN) at
\url{https://CRAN.R-project.org/package=sdmTMB}

<<sdmTMB-install, eval=FALSE, echo=TRUE>>=
install.packages("sdmTMB", dependencies = TRUE)
@

Importantly, \texttt{dependencies = TRUE} includes the \proglang{R}-INLA
package \citep{rue2009, lindgren2011, lindgren2015}, which is not on CRAN but is
needed for the \texttt{make\_mesh()} function below. Soon, we intend to switch
to using the \pkg{fmesher} package to eliminate this dependency.

Alternatively, the development version can be installed with:

<<remotes, eval=FALSE, echo=TRUE>>=
# install.packages("remotes")
remotes::install_github("pbs-assess/sdmTMB", dependencies = TRUE)
@

Additional utilities are maintained in the \pkg{sdmTMBextra} package at
\url{https://github.com/pbs-assess/sdmTMBextra}.

\section{Example: spatial species distribution modelling}\label{pcod}

We begin with a simple species distribution model of encounter probability of
Pacific Cod (\emph{Gadus macrocephalus}) from a trawl survey conducted in Queen
Charlotte Sound, British Columbia, Canada. The purpose of our example is to
illustrate the need for spatial random fields. This survey is conducted by
Fisheries and Oceans Canada (REF) and follows a depth-stratified random sampling
design, resulting in a georeferenced dataset. The data frame \texttt{pcod} is
available as package data in \pkg{sdmTMB}. Relevant columns include latitude,
longitude, Universal Transverse Mercator (UTM) coordinates, bottom depth, and
encounter (\texttt{present = 1}) vs.~non-encounter (\texttt{present = 0}) of
Pacific Cod for a given survey sample.

<<libs, warning=FALSE, message=FALSE, echo=TRUE, cache=FALSE>>=
library(sdmTMB)
library(dplyr)
library(ggplot2)
@

<<setoptions, echo=FALSE>>=
options(
  pillar.print_max = 3,
  pillar.print_min = 3,
  pillar.advice = FALSE,
  pillar.width = 80
)
options(width = 80)
@

<<libs-extras>>=
theme_set(theme_light())
options(ggplot2.continuous.fill = "viridis")
@


<<pcod-head, echo=TRUE>>=
select(pcod, lat, lon, X, Y, depth, present)
@

\subsection{Adding UTM columns}

An \pkg{sdmTMB} model requires a data frame that contains a response column,
columns for any predictors, and columns for spatial coordinates. Usually it
makes sense to convert the spatial coordinates to an equidistant projection such
as UTMs to ensure that distance remains constant throughout the study region
\citep[e.g., using \texttt{sf::st\_transform()},][]{pebesma2018}. Here we use
the helper function \texttt{add\_utm\_columns()} to add UTM coordinates with km
units (so our estimated spatial range parameter is not too big or small). By
default, the function will guess the UTM zone and create new columns \texttt{X}
and \texttt{Y}. Since our example data already has these UTM columns, we can
skip running this code.

<<pcod-utms-eval, echo=TRUE, eval=FALSE>>=
pcod <- add_utm_columns(pcod, c("lon", "lat"), units = "km")
@

\subsection{SPDE mesh creation}

\sloppy We then create a mesh object that contains triangulation and projection
matrices needed to apply the SPDE approach. The argument \texttt{cutoff} defines
the minimum allowed distance between mesh vertices in the units of \texttt{X}
and \texttt{Y}. \texttt{make\_mesh()} is a wrapper function for
\texttt{INLA::inla.mesh.create()} or \texttt{fmesher::fm\_rcdt\_2d\_inla()} and
\texttt{cutoff} is passed through to these functions. Alternatively, we could
have created any mesh via \proglang{R}-\pkg{INLA} or \pkg{fmesher} and supplied
it to the \texttt{mesh} argument in \texttt{make\_mesh()}. We recommend
constructing such a mesh for applied analyses to take advantage of additional
functionality such as coarser mesh triangles in a border around the data and
control over maximum triangle length and minimum triangle angles. We can inspect
mesh object with the associated plotting method
(Figure~\ref{fig:dog-binomial-mesh}). Our mesh has 238
(\texttt{mesh\_pcod\$mesh\$n}) vertices.

<<dog-binomial-mesh, results='hide', message=FALSE, warning=FALSE, echo=TRUE, fig.cap="SPDE mesh (lines) combined with the trawl survey observations (points). The locations where lines intersect are referred to as ``vertices''. Finer meshes will be slower to fit but generally increase the accuracy of the SPDE approximation. This is a simple mesh created with the convenience function \\code{make\\_mesh()}. A greater degree of control over the mesh construction can be achieved by using \\pkg{fmesher} or \\proglang{R}-\\pkg{INLA} directly.", fig.width=5>>=
mesh_pcod <- make_mesh(pcod, xy_cols = c("X", "Y"), cutoff = 8)
plot(mesh_pcod)
@

\subsection{Fitting the model}

We will fit a logistic regression of encounter probability with and without
spatial random fields to illustrate the importance of accounting for spatial
correlation. In addition to the spatial random field, we include an intercept
and a quadratic effect of depth on the probability of encounter. Our random
field model can be written as
\[
\begin{aligned}
y_{\bm{s}} &\sim \operatorname{Bernoulli} \left(\mu_{\bm{s}}\right),\\
\mu_{\bm{s}} &= \operatorname{logit}^{-1} \left( \bm{X}^{\mathrm{main}}_{\bm{s}} \bm{\beta} +
\omega_{\bm{s}}
\right),
\end{aligned}
\]
where \(\bm{X}^{\mathrm{main}}_{\bm{s}}\) represents a matrix of main effect
covariates (intercept, quadratic effects of depth), \(\bm{\beta}\) represents
a vector of estimated main effect coefficients, and \(\omega_{\bm{s}}\)
represents the estimated spatial field, \(\omega_{\bm{s}} \sim
\mathrm{MVN}(\bm{0},\bm{\Sigma}_\omega)\).

We can implement this model with \texttt{sdmTMB()}:

<<pcod-fit, echo=TRUE>>=
fit_bin_rf <- sdmTMB(
  present ~ poly(log(depth), 2),
  data = pcod, 
  mesh = mesh_pcod,
  spatial = "on",
  family = binomial(link = "logit")
)
@

We can also fit a version that omits the spatial random field by setting
\texttt{spatial = "off"}. We will use the \texttt{update()} S3 method to refit
the model while updating any specified arguments:

<<pcod-fit-off, echo=TRUE>>=
fit_bin <- update(fit_bin_rf, spatial = "off")
@

\subsection{Inspecting the model}

We can run some basic checks on our model with the \texttt{sanity()} function:

<<pcod-eg1-sanity, eval=TRUE, echo=TRUE, message=FALSE>>=
sanity(fit_bin_rf)
@

\begin{verbatim}
#> ✓ Non-linear minimizer suggests successful convergence
#> ✓ Hessian matrix is positive definite
#> ✓ No extreme or very small eigenvalues detected
#> ✓ No gradients with respect to fixed effects are >= 0.001
#> ✓ No fixed-effect standard errors are NA
#> ✓ No fixed-effect standard errors look unreasonably large
#> ✓ No sigma parameters are < 0.01
#> ✓ No sigma parameters are > 100
#> ✓ Range parameter doesn't look unreasonably large
\end{verbatim}

This does not flag any issues. \texttt{sanity()} is checking that the
\texttt{nlminb()} optimizer reported successful convergence, that the Hessian
matrix is positive definite, that no extreme or small eigenvalues are detected,
that no absolute log likelihood gradients with respect to fixed defects are
$\le$ 0.001, that all fixed effects have reported standard errors that do not
look unreasonably large ($<$ 100 by default), that random field marginal
standard deviations are not unexpectedly small or large ($>$
0.01 and $<$ 100), and that the random field Matérn range parameter does not
  look unreasonably large ($<$ 1.5 times the largest edge of a bounding box
  around the observations).

We can get a summary of our model fit:

<<pcod-bin-summary, echo=TRUE>>=
summary(fit_bin_rf)
@

The output indicates our model was fit by maximum (marginal) likelihood
(\texttt{ML}). We also see the formula, mesh, fitted data, and family. Next we
see any estimated main effects, the Matérn range distance, the spatial random
field standard deviation, and the negative log likelihood at convergence.

We can use the \texttt{tidy()} function (formatted to match the \pkg{broom}
package TODO) to obtain a data frame with parameter estimates (standard methods
such as \texttt{fixef()} and \texttt{vcov()} are also available). The standard
errors on our fixed effects have increased with the spatial random field:

<<pcod-tidy, eval=TRUE, echo=TRUE, results='markup'>>=
tidy(fit_bin_rf, conf.int = TRUE)
tidy(fit_bin, conf.int = TRUE)
@

By setting \texttt{effects = "ran\_pars"}, \texttt{tidy()} will return random
field parameters, where \texttt{sigma\_O} is \(\sigma_O\) in the above
equations---the standard deviation of the spatial random field \(\bm{\omega}\).

<<pcod-eg1-tidy-re, eval=TRUE, echo=TRUE>>=
tidy(fit_bin_rf, effects = "ran_pars", conf.int = TRUE)
@

\subsection{Checking the effect of including a random field}

We can test for spatial autocorrelation with a Moran's I test or with a visual
inspection of the residuals calculated from the \texttt{residuals()} S3 method.
We omit example code for Moran's I calculation for brevity but include it in the
code supplement. The p-value for spatial autocorrelation is low for the model
without a random field (p $<$ 0.01) but large for the model with
a random field (p = 0.84) suggesting significant residual correlation in the
simpler model that is alleviated by including the random field.

<<morans, echo=FALSE, results='hide'>>=
test_autocor <- function(obj) {
  set.seed(1)
  s <- simulate(obj, nsim = 500)
  pr <- predict(obj, type = "response")$est
  r <- DHARMa::createDHARMa(
    simulatedResponse = s,
    observedResponse = pcod$present,
    fittedPredictedResponse = pr
  )
  DHARMa::testSpatialAutocorrelation(r, x = pcod$X, y = pcod$Y, plot = FALSE)
}
(t_no_rf <- test_autocor(fit_bin))
(t_rf <- test_autocor(fit_bin_rf))
p_rf <- round(t_rf$p.value, 2)
@

We can also see that the AIC of the model with spatial random fields is
lower:

<<pcod-aic, eval=TRUE, echo=TRUE, results='markup'>>=
AIC(fit_bin_rf, fit_bin)
@

\subsection{Comparing models with cross validation}

We can do additional model comparison with cross validation via
\texttt{sdmTMB\_cv()}. Here we will do 10-fold cross validation with the folds
constructed randomly. Using the \texttt{fold\_ids} argument, we could supply our
own folds and conduct spatially blocked cross validation. If we set a parallel
plan with the \pkg{future} package \citep{bengtsson2021future}, our folds will
be fit in parallel.

<<pcod-cv-future, eval=FALSE, echo=TRUE>>=
library(future)
plan(multisession)
@

<<pcod-cv, eval=TRUE, echo=TRUE>>=
cv_bin_rf <- sdmTMB_cv(present ~ poly(log(depth), 2),
  data = pcod, mesh = mesh_pcod, spatial = "on",
  family = binomial(), k_folds = 10
)
cv_bin <- sdmTMB_cv(present ~ poly(log(depth), 2),
  data = pcod, mesh = mesh_pcod, spatial = "off",
  family = binomial(), k_folds = 10
)
@

Indeed, the log likelihood of left-out data is considerably larger for the model
that includes random fields:

<<pcod-cv-out, eval=TRUE, echo=TRUE, results='markup'>>=
cv_bin_rf$sum_loglik
cv_bin$sum_loglik
@

\subsection{Making predictions on new data}

\sloppy To visualize our model, we can make predictions with the
\texttt{predict()} method (\texttt{?predict.sdmTMB}) and optionally use the
\texttt{newdata} argument to predict on a new data frame with any locations and
values for the predictor columns. Here, we will predict on a 2 \(\times\) 2 km
grid (\texttt{qcs\_grid}) that covers the entire region of interest so we can
visualize the predictions spatially. The grid contains spatial covariate columns
and all predictors used in the model set at values for which we want to predict.
The output of \texttt{predict()} is a data frame containing overall estimates in
link space (\texttt{est}), estimates from the non-random-field components
(\texttt{est\_non\_rf}; here, intercept and depth), and estimates from the
individual random field components (here, \texttt{omega\_s}---the spatial
field).

<<pcod-predict, echo=TRUE, results='markup'>>=
p <- predict(fit_bin_rf, newdata = qcs_grid)
select(p, X, Y, depth, est, est_non_rf, omega_s) |>
  as_tibble() |> head(n = 2)
@

<<pcod-predict-maps, fig.width=10, fig.asp=0.4, out.width="6.1in", fig.cap="Prediction components from the binomial species distribution model of Pacific Cod. Shown are (a) the quadratic effect of bottom depth, (b) the spatial random field in link (logit) space, and (c) the overall prediction, which here is the combination of panels a and b. Note the difference between predictions from depth alone (a) and predictions including a spatial random field (c).">>=
plot_spatial_map <- function(dat, column, title) {
  ggplot(dat, aes(X, Y, fill = {{ column }})) +
    geom_raster() +
    coord_fixed() +
    theme(legend.position= "bottom") +
    ggtitle(title) +
    theme(axis.title = element_blank(), axis.ticks = element_blank(), axis.text = element_blank())
}
g1 <- plot_spatial_map(p, plogis(est_non_rf), "(a) Fixed effects")
g2 <- plot_spatial_map(p, omega_s, "(b) Spatial random field") +  scale_fill_gradient2()
g3 <- plot_spatial_map(p, plogis(est), "(c) Combined prediction")
cowplot::plot_grid(g1, g2, g3, ncol = 3)
@

\section{Example: spatiotemporal species distribution modeling}\label{dogfish}

As a second example, we will construct a spatiotemporal model of catch rates of
Pacific Spiny Dogfish (\emph{Squalus suckleyi}) from a trawl survey off the west
coast of Vancouver Island, Canada. This example extends the spatial model
described above by also including (1) spatiotemporal fields allowing the
distribution in each year to be unique, (2) a time-varying intercept as an AR(1)
process to allow year effects to vary but remain autocorrelated, (3) a smooth
effect of depth, allowing catch rates to vary non-linearly with depth, and (4)
spatial anisotropy allowing spatial correlation to be directionally dependent.
Since catch rates are positive, continuous, and contain zeros, we begin by
specifying the response family as a Tweedie distribution \citep{tweedie1984}
with a log link. We then compare alternative families, spatiotemporal random
field structures, and the exclusion of anisotropy to illustrate the flexibility
of \pkg{sdmTMB}.

\subsection{Adding UTM columns and creating a mesh}

The dataset includes spatial coordinates, year, dogfish catch weight in kg, area
swept in km, and bottom depth:

<<dog-head-dat, echo=TRUE>>=
dat <- select(dogfish, lon = longitude, lat = latitude, year, 
  catch_weight, area_swept, depth)
dat
@

We add UTM zone 9 columns, create a log depth column for convenience, and create
a basic mesh:

<<dog-utms, echo=TRUE>>=
dat <- add_utm_columns(dat, c("lon", "lat"), 
  units = "km", utm_crs = 32609)
dat$log_depth <- log(dat$depth)
mesh <- make_mesh(dat, xy_cols = c("X", "Y"), cutoff = 8)
@

<<dog-mesh2, eval=FALSE>>=
plot(mesh)
@

\subsection{Fitting the model}

We can then specify our model. We include an offset for the effort variable log
area swept such that we are effectively modelling density and our predictions
will be for an area swept of 1 km\textsuperscript{2}.

Our model can be written as TODO

\[
\begin{aligned}
\mathbb{E}[y_{\bm{s},t}] &= \mu_{\bm{s},t},\\
\mu_{\bm{s},t} &=
\exp \left( \bm{X}^{\mathrm{main}}_{\bm{s},t} \bm{\beta} +
O_{\bm{s},t} +
\bm{X}^{\mathrm{tvc}}_{\bm{s},t} \gamma_t +
\omega_{\bm{s}} +
\epsilon_{\bm{s},t}
\right),
\end{aligned}
\]

where \(\bm{\beta}\) are coefficients associated with the main effects,
\(O_{\bm{s},t}\) represents the offset (here, log area swept), \(\gamma_t\)
represents the time-varying coefficients, \(\omega_{\bm{s}}\) is the spatial
field (equivalent to a spatial intercept) and \(\epsilon_{\bm{s},t}\) represents
spatiotemporal fields.

The temporally varying intercepts \(\gamma_t\) are modeled as a stationary AR(1)
process,

\[
\begin{aligned}
  \gamma_{t=1} &\sim \operatorname{Normal} \left(0, \sigma^2_{\gamma} \right),\\
  \gamma_{t>1} &\sim \operatorname{Normal} \left(\rho_\gamma\gamma_{t-1}, \sqrt{1 - \rho_\gamma^2} \sigma^2_{\gamma} \right).
\end{aligned}
\]

<<dog-tw, results='hide', message=FALSE, warning=FALSE, echo=TRUE>>=
fit_tw <- sdmTMB(
  catch_weight ~ s(log_depth),
  data = dat,
  mesh = mesh,
  offset = log(dat$area_swept),
  time = "year",
  time_varying = ~ 1,
  time_varying_type = "ar1",
  spatial = "on",
  spatiotemporal = "iid",
  anisotropy = TRUE,
  silent = FALSE,
  family = tweedie()
)
@

\subsection{Exploring delta-model alternative families}

We can explore four alternative families that may better represent the data.
Each alternative family uses a delta or hurdle distribution: delta-gamma and
delta-lognormal \citep{aitchison1955}, and delta-Poisson-link-gamma and
delta-Poisson-link-lognormal \citep{thorson2018poisson}. The Poisson-link models
depart from conventional delta models in treating the probability of occurrence
at a given location ($p_i$) as a Poisson process rather than a Bernoulli one,
$p_i = 1 - \exp(a_i \cdot n_i)$, where $n_i$ is the total number of individuals
available to be encountered, and $a_i$ is a measure of sampling effort
\citep{thorson2018poisson}. Note that we choose to omit the spatiotemporal
random fields from the binomial model component (\texttt{spatiotemporal
= list("off", "iid")}) because initial fits indicated this random field was
collapsing to zero indicating minimal changes in encounter spatial distribution
from year to year.

% TODO EQUATIONS NEED TO INTRO THE POISSON LINK AS BRIEFLY AS POSSIBLE. SEE sdmTMB VIGNETTE.

<<dog-update, results='hide', message=FALSE, warning=FALSE, echo=TRUE>>=
fit_dg <- update(fit_tw, family = delta_gamma(), 
  spatiotemporal = list("off", "iid"))
fit_dl <- update(fit_dg, family = delta_lognormal())
fit_dpg <- update(fit_dg, family = delta_poisson_link_gamma())
fit_dpl <- update(fit_dg, family = delta_poisson_link_lognormal())
@

We can then compare the models via AIC:

<<dog-aic, echo=TRUE>>=
AIC(fit_tw, fit_dg, fit_dl, fit_dpg, fit_dpl) |> 
  mutate(delta_AIC = AIC - min(AIC)) |> 
  arrange(delta_AIC)
@

We find that the Poisson-link delta-lognormal model is favoured with AIC. 

\subsection{Adding AR(1) random fields and comparing isotropic correlation}

We next test two additional model formulations: making the spatial correlation
isotropic (the default) instead of anisotropic, and structuring the positive
model component spatiotemporal random fields as AR(1) to allow spatiotemporal
hotspots to persist from year to year.

The AR(1) fields can be represented as:

\[
\begin{aligned}
\bm{\delta}_{t=1} &\sim \operatorname{MVN} (\bm{0}, \bm{\Sigma}_{\epsilon}),\\
\bm{\delta}_{t>1} &= \rho \bm{\delta}_{t-1} + \sqrt{1 - \rho^2} \bm{\epsilon_{t}},  \:
\bm{\epsilon_{t}} \sim \operatorname{MVN} \left(\bm{0}, \bm{\Sigma}_{\epsilon} \right),
\end{aligned}
\]

where $\rho$ represents the estimated autoregressive parameter allowing the
spatial field at time $t$ to be correlated with the spatial field at time $t-1$.

<<dog-ar1, results='hide', echo=TRUE>>=
fit_dpl_iso <- update(fit_dpl, anisotropy = FALSE)
fit_dpl_ar1 <- update(fit_dpl, spatiotemporal = list("off", "ar1"))
@

<<dog-aci2, echo=TRUE>>=
AIC(fit_dpl_ar1, fit_dpl, fit_dpl_iso)
@

% TODO: Need description of anisotropy and why it's important here or somewhere else

We find that the anisotropic AR(1) is favoured. It makes sense that anisotropy
is important here given the elongated shape of the continental shelf with
a rapid transition to deeper water. We can use \texttt{plot\_anisotropy()} to
visually inspect the anisotropy (Figure~\ref{fig:dog-aniso}).

<<dog-aniso, echo=TRUE, fig.cap= "A visualization of anisotropy from the function \\code{plot\\_anisotropy()}. Ellipses are centered at coordinates of zero in the space of the X-Y coordinates being modeled. The ellipses show the spatial and spatiotemporal range (distance at which correlation is effectively independent) in any direction from the center (zero).", out.width="4in">>=
plot_anisotropy(fit)
@

On inspecting the model output with
\texttt{summary()}, we notice that the spatial random field SD in the positive
model component has become very small once AR(1) spatiotemporal fields were
added. We therefore consider a model where these are turned off in the second
component of the delta model and choose this model.

<<dog-ar1-2, echo=TRUE, results="hide">>=
fit_dpl_ar1_only <- update(fit_dpl_ar1, spatial = list("on", "off"))
@

<<dog-aic3, echo=TRUE>>=
AIC(fit_dpl_ar1_only, fit_dpl_ar1, fit_dpl)
@

\subsection{Inspecting the model}

We save our chosen model to the object \texttt{fit} to simplify subsequent code,
run the \texttt{sanity()} check (suppressed for brevity), and inspect
\texttt{summary()}:

<<dog-print, echo=TRUE>>=
fit <- fit_dpl_ar1_only
sanity(fit)
summary(fit)
@

The output is more complex compared to our binomial spatial model. We now have
two model components, which are shown one after the other. Starting with the
binomial component, we have output from the smoother, which includes a linear
component (\texttt{slog\_depth}) and the standard deviation on the smoother
weights (\texttt{sds(log\_depth)}). The smoother summary follows the format used
in the \pkg{brms} package \citep{burkner2017}. Next, we have the time-varying
intercepts and information on our anisotropic spatial correlation. We then have
the second model component (lognormal) with a similar summary structure but with
the addition of a dispersion parameter for the lognormal, the AR(1) correlation
of the spatiotemporal random fields, and a spatiotemporal random field marginal
standard deviation. 

\subsection{Visualizing model predictions}

Similarly to the first example, we can visualize model predictions on a grid
covering the area of interest. Because this is a spatiotemporal model, we first
need to replicate our grid for each year we will predict on. Since this is
a common operation, we include the convenience function \texttt{replicate\_df()}
to replicate a data frame. We then ensure our data frame contains all the
predictors used in the model (here \texttt{log\_depth}).

% TODO Propose moving this to a short paragraph `Prediction` to highlight modularity

<<dog-grid, echo=TRUE>>=
grid <- replicate_df(wcvi_grid, "year", time_values = unique(dat$year))
grid$log_depth <- log(grid$depth)
head(grid, n = 2)
@

<<dog-pred1, echo=TRUE>>=
pred <- predict(fit, newdata = grid, type = "response")
@

<<dog-pred2, echo=TRUE>>=
names(pred)
@

Our prediction data frame is similar to the binomial spatial model, but includes
columns for the two delta model components (labelled with suffixes \texttt{1}
and \texttt{2}) and adds an \texttt{epsilon\_st} column for spatiotemporal
random effects. We can easily generate plots from this data frame using code
similar to in our spatial example with Pacific Cod. We suppress that code for
brevity.

<<plot-map, echo=FALSE>>=
plot_map <- function(dat, column) {
  ggplot(dat, aes(X, Y, fill = {{ column }})) +
    geom_raster() +
    facet_wrap(vars(year)) +
    coord_fixed() +
    theme(legend.position= "bottom") +
    theme(axis.title = element_blank(), axis.ticks = element_blank(), axis.text = element_blank())
}
@

<<dog-plot1, echo=FALSE>>=
g_nonrf <- pred |> filter(year %in% c(2004, 2022)) |> 
  plot_map(est_non_rf1) +
  scale_fill_viridis_c(trans = "log10") +
  ggtitle("(a) Non-random-field components; first delta model")
@

<<dog-plot2, echo=FALSE>>=
g_omega <- pred |> filter(year %in% c(2004, 2022)) |> 
  plot_map(omega_s1) +
  scale_fill_gradient2() +
  ggtitle("(b) Spatial random field; first delta model")
@

<<dog-plot3, echo=FALSE>>=
g_eps <- pred |> filter(year %in% c(2004, 2022)) |> 
  plot_map(epsilon_st2) +
  scale_fill_gradient2() +
  ggtitle("(c) Spatiotemporal random field; second delta model")
@

<<dog-plot4, echo=FALSE>>=
g_est <- pred |> filter(year %in% c(2004, 2022)) |> 
  plot_map(est) +
  # labs(fill = "Density") +
  scale_fill_viridis_c(trans = "log10") +
  ggtitle("(d) Overall prediction")
@

<<dog-wcvi-pred, fig.asp = 0.8, fig.cap="Example prediction components from the spatiotemporal model of Pacific Dogfish biomass density. Throughout, two example years are shown. \\code{est\\_non\\_rf1} refers to the prediction from all non-random-field components (here, a smoother for bottom depth and the time-varying year effect) from the first delta model, \\code{omega\\_s1} refers to the spatial random field from the first delta model, \\code{epsilon\\_st2} refers to spatiotemporal random fields from the second delta model, and \\code{est} refers to the overall prediction estimate combining all effects. The spatial random field is constant through time and represents static biotic or abiotic features not included as covariates (e.g. habitat). The spatiotemporal random fields are different each time step and here are allowed to follow an AR(1) process. They represent temporal variability in the spatial patterning of Pacific Spiny Dogfish (e.g., resulting from movement or local changes in population density).", fig.width=9, out.width="6in">>=
cowplot::plot_grid(
  g_nonrf,
  g_omega,
  g_eps,
  g_est,
  ncol = 2L
)
@

We can visualize the conditional effect of the bottom depth smoother by
predicting across a sequence of depths and holding other variables at reference
values (Figure~\ref{fig:dog-depth-plot}). Here, we pick the last year, specify
to include both delta model components (\texttt{model = NA}), omit the random
fields (\texttt{re\_form = NA}), and return standard errors (\texttt{se\_fit\
= TRUE}).

<<dog-depth, echo=TRUE, out.width="5in">>=
nd <- data.frame(
  log_depth = seq(min(dat$log_depth), max(dat$log_depth), length.out = 100), 
  year = max(dat$year)
)
pred_depth <- predict(
  fit, newdata = nd, 
  model = NA, re_form = NA, se_fit = TRUE
)
@

<<dog-depth-plot, echo=FALSE, fig.cap="The conditional effect of ocean bottom depth on Pacific Spiny Dogfish density. The line and shaded ribbon represent the mean and 95\\% confidence interval, respectively. Other fixed effects are held at constant values and the random fields are omitted from the prediction.", out.width="4in">>=
ggplot(pred_depth, aes(
  exp(log_depth), exp(est), 
  ymin = exp(est - 2 * est_se), 
  ymax = exp(est + 2 * est_se))) +
  geom_ribbon(fill = "grey90") +
  geom_line() +
  scale_y_continuous(expand = expansion(mult = c(0, 0.03)), limits = c(0, NA)) +
  labs(x = "Depth (m)", y = "Density")
@

\subsection{Calculating an area-weighted index}

We can generate an area-weighted population index (e.g., a relative or absolute
index of abundance or biomass) that is independent of sampling locations by
predicting from the model on a grid covering the area of interest and summing
the predicted biomass with the \texttt{get\_index()} function (Figure
\ref{fig:dog-index-plot}). We supply the grid cell area (4
km\textsuperscript{2}) to the \texttt{area} argument and specify
\texttt{bias\_correct = TRUE} to enable a bias correction needed due to the
non-linear transformation of the random effects \citep{thorson2016bias}.

% TODO and the Laplace?

<<dog-index, echo=TRUE>>=
pred2 <- predict(fit, newdata = grid, return_tmb_object = TRUE)
ind <- get_index(pred2, bias_correct = TRUE, area = rep(4, nrow(grid)))
@

<<dog-index-plot, echo=FALSE, fig.cap="Area-weighted index of relative biomass over time for Pacific Spiny Dogfish. Dots and line segments represent means and 95\\% confidence intervals.", out.width="4in">>=
ggplot(ind, aes(year, est, ymin = lwr, ymax = upr)) +
  geom_pointrange() +
  scale_y_continuous(expand = expansion(mult = c(0, 0.03)), limits = c(0, NA)) +
  labs(y = "Biomass", x = "Year")
@

\clearpage

\section{Example: spatially varying coefficients} \label{svc-owls}

In our final example, we demonstrate a model with spatially varying coefficient
(SVC) effects and illustrate combining uncertainty from parameters by working
with draws from the joint parameter precision matrix. Spatially varying
coefficients \ldots{} TODO REFS. In addition, we illustrate using restricted
maximum likelihood (REML), which integrates over the fixed effects as well as
the random effects.

Snowy Owls (\emph{Bubo scandiacus}) breed on the arctic tundra and are irruptive
migrants, meaning that they appear across the mid-latitudes of North America in
much greater numbers in some winters than others. The reasons for this
interannual variation in the number of individuals migrating south are not well
understood but seem to be related to high abundances of food during the breeding
season and therefore sharp increases in breeding ground population densities
\citep{robillard2016}. The North Atlantic Oscillation Index (NAO) has been
linked to productivity of both owls and their prey in Europe \citep{millon2014}.
Because both productivity and the choice of wintering location could be
influenced by climate, we modelled a spatially varying effect of annual mean NAO
index on winter abundance across the southern boundary of their winter
distribution. 

Our data are read in from supplementary data and contain columns for UTM spatial coordinates, year, year as a factor, and the annual NAO value:

<<owl-data>>=
snow <- readRDS(here::here("data/SNOW_data.rds"))
@

<<owl-data-head, echo=TRUE>>=
select(snow, X, Y, year, year_f, nao)
@

\subsection{Fitting the model}

We fit counts observed in North America during annual Christmas
Bird Counts \citep{cbc} using a negative binomial \citep[NB2,][]{hilbe2011}
distribution, random intercepts for year, spatial and spatiotemporal random
fields, and a spatially varying coefficient associated with the NAO.

We can write the model as

\[
\begin{aligned}
y_{\bm{s},t} &\sim \operatorname{NB2} 
  \left(
  \mu_{\bm{s},t}, 
  \phi 
  \right),\\
\mu_{\bm{s},t} &=
\exp \left( \bm{X}^{\mathrm{main}}_{\bm{s},t} \bm{\beta} +
\alpha_t +
\bm{X}^{\mathrm{svc}}_{\bm{s},t} \zeta_{\bm{s}} +
\omega_{\bm{s}} +
\epsilon_{\bm{s},t} \right),
\end{aligned}
\]

where three types of random fields are now estimated: the spatial intercept
($\omega_{\bm{s}}$), spatiotemporal variation ($\epsilon_{\bm{s},t}$), and
spatially varying NAO coefficients ($\zeta_{\bm{s}}$). The NB2 distribution is
specified with a mean $\mu_{\bm{s},t}$ and size parameter $\phi$. The
observation variance scales quadratically with the mean: $\mathrm{Var}[y] = \mu
+ \mu^2 / \phi$ \citep{hilbe2011}. The $\alpha_t$ represent IID random
intercepts by year: $\alpha_t \sim \operatorname{Normal} \left(0,
\sigma_\alpha^2 \right)$.

<<owl-fit, echo=TRUE, results = "hide">>=
mesh_snow <- make_mesh(snow, xy_cols = c("X", "Y"), cutoff = 1.5)
fit_owl <- sdmTMB(
  count ~ 1 + nao + (1 | year_f),
  spatial_varying = ~ nao,
  time = "year",
  data = snow, 
  mesh = mesh_snow,
  family = nbinom2(link = "log"),
  spatial = "on",
  spatiotemporal = "iid",
  reml = TRUE,
  silent = FALSE
)
@

\subsection{Inspecting the model}

<<owl-sanity, eval=FALSE>>=
sanity(fit_owl)
@

<<owl-print, echo=TRUE>>=
summary(fit_owl)
@

In addition to the output seen for other models, we now have a section for
random intercepts and a standard deviation for the spatially varying coefficient
random field. Given our model specification, all random fields are sharing
a single Matérn range.

\subsection{Extracting the spatially varying coefficient effects}

The spatially varying coefficient effect at any point in space is the
combination of the main effect and spatial random effect for \texttt{nao}. We
illustrate deriving uncertainty on their combination by simulating from the
parameter precision matrix assuming the joint parameter covariance matrix in
multivariate normal. We do this by specifying a non-null number of simulation
draws to \texttt{nsim} in \texttt{predict.sdmTMB()}. By default, \texttt{nsim >
0} will return a matrix of draws from the overall prediction. Here, we instead
   specify that we want to return draws from the \texttt{zeta\_s} random field,
   which is the spatially varying random field. This returns a matrix where each
   row matches a row of \texttt{newdata} and each column is a simulation draw.
   We then use the function \texttt{spread\_sims()} to draw 200 simulations from
   the parameters themselves, combine the main effect draws (\texttt{sims\$nao})
   with the random field values \texttt{zeta\_s}, and calculate the median for
   each row of data so we can plot them.

<<p-mean, message=FALSE, echo=TRUE, eval=TRUE, cache=TRUE>>=
zeta_s <- predict(fit_owl, newdata = snow, nsim = 200, sims_var = "zeta_s")
dim(zeta_s)
sims <- spread_sims(fit_owl, nsim = 200)
combined <- sims$nao + t(zeta_s)
snow$nao_effect <- apply(exp(combined), 2, median)
@

We can make a basic plot using the following code. A more elaborate
version is shown in Figure~\ref{fig:owl-plot-fancy}.

<<owl-plot-basic, echo=TRUE, eval=FALSE>>=
ggplot(snow, aes(X, Y)) + geom_point(aes(colour = nao_effect))
@

Overall, we find a weak average positive effect of annual mean NAO on overall
counts, but a southeast to northwest gradient in the intensity of the effect
(Figure~\ref{fig:owl-plot-fancy}). This result is consistent with owls closest
to the Atlantic coast and those migrating the furthest south being the most
affected by NAO.

% TODO keep this? We provide an extended version of this example in Appendix \ref{app:owls}.

<<shapes, echo=FALSE>>=
if (!file.exists(here::here("data/ne_10m_lakes"))) {
  zip_file <- paste0("https://www.naturalearthdata.com/http//www.naturalearthdata.com/",
    "download/10m/physical/ne_10m_lakes.zip")
  download.file(zip_file, destfile = here::here("data/ne_10m_lakes.zip"))
  unzip(here::here("data/ne_10m_lakes.zip"), exdir = here::here("data/ne_10m_lakes"))
}
@

<<shapes-read, echo=FALSE>>=
Albers <- "+proj=aea +lat_0=40 +lon_0=-96 +lat_1=20 +lat_2=60 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs"
coast <- rnaturalearth::ne_coastline(scale = "medium", returnclass = "sf") %>%
  sf::st_transform(crs = Albers)
lakes <- sf::st_read(here::here("data/ne_10m_lakes"), quiet = TRUE)
lakes <- lakes[lakes$scalerank == 0, ] %>% sf::st_transform(crs = Albers)
@

<<owl-proj2>>=
# project to get nice axis limits 
snow2 <- snow |> mutate(X = X * 100000, Y = Y * 100000)
snow2 <- snow2 |> mutate(x = X, y = Y) |> 
  sf::st_as_sf(coords = c("x", "y"), crs = Albers)
@

<<owl-plot-fancy, echo=FALSE, eval=TRUE, fig.cap="Spatially varying coefficient for effect of mean annual NAO (North Atlantic Oscillation) on counts of Snowy Owls observed on annual Christmas Bird Counts from 1979--2020 in Canada and the US. Points represent all count locations and circle area is scaled to the mean number of owls observed per year (range: 0 to 8). The effect is multiplicative on owl count per NAO unit. In the west, the values are near 1 implying no effect, whereas in the southeast the effect becomes positive.", fig.width=6.5>>=
nao_effect_df <- select(snow, X, Y, nao_effect) |> distinct() |> 
  mutate(X = X * 100000, Y = Y * 100000) # to match CRS
ggplot(data = nao_effect_df) +
  geom_point(aes(X, Y, colour = nao_effect)) +
  geom_sf(data = coast, colour = "gray50") +
  geom_sf(data = lakes, colour = "gray50", fill = NA) +
  coord_sf(
    xlim = c(min(snow2$X), max(snow2$X)),
    ylim = c(min(snow2$Y), max(snow2$Y))
  ) +
   scale_colour_viridis_c(
    guide = guide_colourbar(direction = "horizontal", title.position = "left")
  ) +
  labs(colour = "Estimated multiplicative effect\nof NAO on Snowy Owl count") +
    theme(legend.position = "bottom", axis.title = element_blank())
@

\clearpage

\section{Package comparisons}\label{package-comparisons}

TODO: BEFORE OR AFTER EXAMPLES

There are many \proglang{R} packages capable of fitting geostatistical spatial
or spatiotemporal models \citep[e.g.,][]{heaton2019}. \pkg{sdmTMB}, \pkg{VAST},
\proglang{R}-\pkg{INLA}/\pkg{inlabru}, and \pkg{spaMM} \citep{rousset2014} are
the most closely related, as they all provide a user interface to SPDE-based GRF
models. In our software comparison (Table \ref{tab:functionality}), we also
include \pkg{mgcv} as it can be adapted to use the SPDE \citep{miller2019} and
\pkg{spBayes} \citep{finley2007, finley2015} since it is a prominent package
that can fit related predictive-process models without the SPDE. \pkg{sdmTMB},
\pkg{VAST}, and \pkg{mgcv} can estimate anisotropic covariance whereas
\proglang{R}-\pkg{INLA}/\pkg{inlabru} and \pkg{spBayes} are currently limited to
isotropic covariance. \pkg{sdmTMB} and \pkg{mgcv} focus on univariate response
data, whereas \pkg{VAST}, \proglang{R}-\pkg{INLA}/\pkg{inlabru}, \pkg{spaMM},
and \pkg{spBayes} extend to multivariate responses with various limitations. To
our knowledge, \pkg{VAST} is the only package to implement spatial
\citep{thorson2015} and spatial dynamic factor analysis \citep{thorson2016} and
spatial empirical orthogonal function (EOF) regression \citep{thorson2020}. Of
these packages, only \pkg{sdmTMB} and \pkg{inlabru} can currently fit threshold
(e.g., hockey-stick) covariate relationships. \pkg{spaMM} is limited to
a spatial random field (i.e., does not fit spatiotemporal fields) and
\pkg{spBayes} implements spatiotemporal fields, but only as a random walk. There
is considerable variability in the available observation likelihoods across
packages (Table \ref{tab:functionality}). We provide comparisons of the syntax
and the reproducibility of results from models fit using \pkg{sdmTMB},
\proglang{R}-\pkg{INLA}, and \pkg{inlabru} in Appendix~\ref{app:inla}.

\begin{table}

\centering
\fontsize{8}{10}\selectfont
\begin{threeparttable}
\begin{tabular}[t]{lllllll}
\toprule
 & \pkg{sdmTMB} & \pkg{VAST} & \proglang{R}-\pkg{INLA}/\pkg{inlabru} & \pkg{mgcv} & \pkg{spBayes} & \pkg{spaMM}\\
\midrule
Time-varying coefficients & \checkmark & --$^1$ & \checkmark & \checkmark & \checkmark & --\\
Spatially varying coefficients (SVC) & \checkmark & \checkmark & \checkmark & \checkmark & \checkmark & --\\
GAMs$^2$ & \checkmark & -- & \checkmark & \checkmark & -- & --\\
Threshold covariates & \checkmark & -- & \checkmark$^3$ & -- & -- & --\\
Offsets & \checkmark & \checkmark & \checkmark & \checkmark & \checkmark & \checkmark\\
\addlinespace
Spatiotemporal fields & \checkmark & \checkmark & \checkmark & \checkmark & \checkmark$^4$ & --\\
Spatial + spatiotemporal fields & \checkmark & \checkmark & \checkmark & \checkmark & -- & --\\
Anisotropy & \checkmark & \checkmark & -- & \checkmark & -- & --\\
Correlation barriers & \checkmark & \checkmark & \checkmark & \checkmark & -- & --\\
Separate range parameters for fields & \checkmark & -- & \checkmark & \checkmark & -- & --\\
Share range parameters across fields & \checkmark & \checkmark & \checkmark & -- & -- & --\\
SPDE-based & \checkmark & \checkmark & \checkmark & \checkmark$^5$ & --$^6$ & \checkmark\\
\addlinespace
NB1 distribution & \checkmark & -- & \checkmark & \checkmark & -- & \checkmark\\
NB2 distribution & \checkmark & \checkmark$^7$ & \checkmark & \checkmark & -- & \checkmark\\
Zero-truncated distributions & \checkmark & -- & \checkmark & -- & -- & \checkmark\\
Zero-inflated distributions & \checkmark & \checkmark & \checkmark & -- & -- & \checkmark\\
Tweedie distribution & \checkmark & \checkmark & \checkmark & \checkmark$^8$ & -- & --\\
Student-t distribution & \checkmark & -- & \checkmark & \checkmark & -- & --\\
Censored Poisson distribution & \checkmark & -- & \checkmark & -- & -- & --\\
log Gaussian Cox processes & --$^9$ & --$^9$ & \checkmark & --$^9$ & --$^9$ & --$^9$\\
Multivariate responses & -- & \checkmark & \checkmark & -- & \checkmark & \checkmark\\
Built-in delta/hurdle models & \checkmark & \checkmark & \checkmark & --$^{10}$ & -- & \checkmark\\
Poisson-link delta models & \checkmark & \checkmark & \checkmark & -- & -- & --\\
Likelihood weights & \checkmark & -- & \checkmark & \checkmark & \checkmark & \checkmark\\
Maximum/marginal likelihood & \checkmark & \checkmark & -- & \checkmark & -- & --\\
\addlinespace
Bayesian/optionally Bayesian & \checkmark & \checkmark & \checkmark & \checkmark & \checkmark & --\\
Priors/penalties & \checkmark & -- & \checkmark & -- & \checkmark & --\\
Matern PC priors & \checkmark & -- & \checkmark & -- & -- & --\\
\addlinespace
Spatial (or spatial dynamic) factor analysis & -- & \checkmark & -- & -- & -- & --\\
Empirical Orthogonal Function (EOF) analysis & -- & \checkmark & -- & -- & -- & --\\
Built-in area-weighted index standardization & \checkmark & \checkmark & -- & -- & -- & --\\
Built-in cross-validation & \checkmark & -- & -- & -- & -- & --\\
\bottomrule
\end{tabular}
\end{threeparttable}
\label{tab:functionality}

\caption{Comparison of functionality between several \proglang{R} packages that
  can fit geostatistical GLMMs.
Notes:
$^1$Technically possible but non-trivial.
$^2$Penalized smoother GAMs that determine `wiggliness'.
$^3$\pkg{inlabru} but not \proglang{R}-\pkg{INLA}.
$^4$Spatiotemporal fields as random walk only.
$^5$SPDE approach as in \citet{miller2019}.
$^6$Does have predictive process knots.
$^7$Zero-inflated NB2 only.
$^8$Tweedie power parameter fixed for \texttt{mgcv::gamm()}.
$^9$Possible as log-linked Poisson GLMM with aggregated data.
$^{10}$Hurdle models possible by fitting components separately.
}
\end{table}

We ran a simple speed comparison between \pkg{sdmTMB},
\proglang{R}-\pkg{INLA}/\pkg{inlabru}, and \pkg{mgcv} for fitting an SPDE
spatial random field model to 1000 data points with Gaussian error across
a range of mesh resolutions (Figure~\ref{fig:timing}, Appendix \ref{app:speed}).
In this test, \pkg{sdmTMB} was the fastest across all mesh resolutions; however,
\proglang{R}-\pkg{INLA}/\pkg{inlabru} and \pkg{spaMM} were less affected by mesh
resolution than \pkg{sdmTMB}. \pkg{mgcv} was most affected by mesh resolution.
Our test was restricted to one core and default \proglang{R} algebra libraries;
all packages could run faster with optimized libraries and parallel processing.
Results with optimized math libraries on one core (\pkg{openBLAS}:
\citet{openblas} and \pkg{PARDISO}: \citet{pardiso7.2a}) resulted in
a \textasciitilde10\% speed increase for \pkg{sdmTMB} and \pkg{inlabru} and
a \textasciitilde7--9-fold speed increase for \pkg{mgcv}.

\begin{figure}[htb]
\centering
\includegraphics[width=3.5in]{../../figs/timing-spatial-2023-03-16-xkcd.pdf}
\caption[]{Comparison of time to fit an SPDE spatial random field model with
  1000 observations, an intercept and one predictor, Gaussian error, and
  a sequence of SPDE resolutions. Lines represent means and ribbons 95\%
  quantiles across 50 random iterations. Note the log-distributed x axis.
  \pkg{VAST} should be similar to \pkg{sdmTMB} and so is not shown.
  \pkg{inlabru} used the empirical Bayes integration strategy and Gaussian
  approximation with \texttt{bru\_max\_iter = 1}, and the \texttt{like()}
  formulation. \pkg{mgcv} used \texttt{bam()}, \texttt{method = `fREML'}, and
  discretized covariates \citep{miller2019}. Note that \pkg{spaMM} only fits
  spatial, not spatiotemporal, models. All platforms were restricted to one core
and could be faster with parallel computation or optimized algebra
libraries.}\label{fig:timing}
\end{figure}


\section{Discussion}\label{discussion}

How does one choose among the related packages mentioned in this paper to fit
SPDE-based geostatistical GLMMs? Assuming a given package can fit the model of
interest (Table~\ref{tab:functionality}), we suggest the primary differences are
the user interface (Appendix \ref{app:inla}) and speed. We think users familiar
with \texttt{stats::glm()}, \pkg{lme4}, \pkg{mgcv}, or \pkg{glmmTMB} will find
\pkg{sdmTMB} most approachable. Users familiar with \proglang{R}-\pkg{INLA} will
find \pkg{inlabru} approachable. Users familiar with \pkg{mgcv} can adapt
\pkg{mgcv} to fit similar models with custom code \citep{miller2019} and
\proglang{R}-\pkg{INLA}/\pkg{inlabru} and \pkg{mgcv} are also general purpose
modelling packages. \pkg{VAST} is the sole option for fitting some multivariate
models; alternatively, because \pkg{VAST} focuses on multivariate delta models
and fisheries applications, users fitting ``simple'' univariate
spatial/spatiotemporal GLMMs in non-fisheries contexts may find \pkg{sdmTMB}
more straightforward. Users looking for calculation, with uncertainty, of
derived variables such as area-weighted population indexes, may favour
\pkg{sdmTMB} or \pkg{VAST} (although such quantities can be post hoc derived
with other packages).

With respect to computational speed, \pkg{sdmTMB} (and due to having the same
\pkg{TMB} backend, \pkg{VAST}) were fastest with a spatial model up to at least
\textasciitilde 1000 mesh vertices at approximately a seven-times (at 1165
vertices) to 30-times (at 125 vertices) speed increase over
\proglang{R}-\pkg{INLA}/\pkg{inlabru}. These speed increases can allow for more
rapid and thorough model exploration and experimentation with a class of
computationally intensive models. However, for users ultimately interested in
Bayesian inference, the approximate Bayesian inference offered by
\proglang{R}-\pkg{INLA}/\pkg{inlabru} is likely to be considerably faster than
passing the same model from \pkg{sdmTMB}/\pkg{VAST} to \pkg{tmbstan} for full
Bayesian inference.

Additional functionality in \pkg{sdmTMB} not already mentioned includes
interpolating across missing time slices and forecasting, the barrier SPDE model
\citep{bakka2019}, time-varying spatiotemporal covariance parameters
\citep{ward2022}, and simulation from the parameter joint precision matrix.
Future development may include additional zero-inflated models, improvements to
Bayesian sampling efficiency \citep[e.g.,][]{monnahan2021}, continuous-time
models \citep[e.g.,][]{blangiardo2015book}, multivariate responses, and
non-Gaussian random fields \citep[e.g.,][]{anderson2019}. The included \pkg{TMB}
\texttt{.cpp} file provides a tested model template that can be modified to add
additional features.

There are several planned additions to the \pkg{sdmTMB} model structure.
A subset of features to be added in the near future includes (1) multivariate
models to allow for simultaneous modelling of data from multiple species, (2)
integration with the \pkg{RTMB} package so that the model code base will be
written in \proglang{R} rather than \proglang{C++}, (3) inclusion of
a dispersion formula similar to \pkg{glmmTMB}, and (4) estimation of random
slopes.
% TODO random slopes looks gnarly to do generically?

\section{Acknowledgements}\label{acknowledgements}

\pkg{sdmTMB} would not be possible without the \pkg{TMB} \citep{kristensen2016}
and \proglang{R}-\pkg{INLA} \citep{rue2009, lindgren2011, lindgren2015}
\proglang{R} packages. \pkg{sdmTMB} is heavily inspired by and in some places
code has been adapted from both the \pkg{VAST} \citep{thorson2019} and
\pkg{glmmTMB} \citep{brooks2017} \proglang{R} packages (as described in the
DESCRIPTION and inst/COPYRIGHTS files). Smoother support was possible thanks to
\pkg{mgcv} \citep{wood2017a}. We thank the authors of all these packages. We
thank S. Kotwicki, M. Lindmark, M. Martin, C.C. Monnahan, P.M. Regular, J.T.
Thorson, and J. Watson for helpful comments that substantially improved the
manuscript. Christmas Bird Count data were provided by National Audubon Society
and through the generous efforts of Bird Studies Canada and countless volunteers
across the Western Hemisphere.

\clearpage

% \appendix

%% -- Bibliography -------------------------------------------------------------
%% - References need to be provided in a .bib BibTeX database.
%% - All references should be made with \cite, \citet, \citep, \citealp etc.
%%   (and never hard-coded). See the FAQ for details.
%% - JSS-specific markup (\proglang, \pkg, \code) should be used in the .bib.
%% - Titles in the .bib should be in title case.
%% - DOIs should be included where available.

\bibliography{refs.bib}

%% -- Appendix (if any) --------------------------------------------------------
%% - After the bibliography with page break.
%% - With proper section titles and _not_ just "Appendix".

\end{document}
